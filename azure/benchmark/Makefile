# ------------------------------------
# Set the following for your specific environment
# Already have a Cluster? Set these values to point to your existing environment
# Otherwise, these values will be used to create a new Cluster

region ?= eastus
#region ?= westus
clusterName ?= paul-r1-benchmark-002
resourceGroup ?= PAUL_R1_BENCHMARK-002-rg

machineType ?= Standard_A8_v2
nodeCount ?= 3
minSize ?= 3
maxSize ?= 6
certEmail ?= YOUR_EMAIL

# Configure the fully qualified domain name
# The dnsLabel is the first part of the domain address. It will be used no matter what baseDomain you configure below
dnsLabel ?= paul-benchmark

# In Azure, we can use the `cloudapp.azure.com` base domain.
# In this case, the fully qualified domain name will look like <dnsLabel>.<region>.cloudapp.azure.com
baseDomainName ?= $(region).cloudapp.azure.com

# Another option is to use nip.io (See more at [https://nip.io](http://nip.io) )
# The fully qualified domain name will look something like <dnsLabel>.<ip address>.nip.io
# baseDomainName ?= nip.io

# Another option is to replace baseDomainName with your own domain name
# In this case, the fully qualified domain name will look like <dnsLabel>.<baseDomainName>
# baseDomainName ?= YOUR_CUSTOM_DOMAIN_NAME

# Only relevant when using google cloud dns
dnsManagedZone ?= aks

# ------------------------------------
# Camunda Enterprise Docker Registry Login

camundaDockerRegistrySecretName ?= camunda-docker-registry
camundaDockerRegistryUrl ?= registry.camunda.cloud
camundaDockerRegistryUsername ?= YOUR_EE_USERNAME
camundaDockerRegistryPassword ?= YOUR_EE_PASSWORD
camundaDockerRegistryEmail ?= YOUR_EE_EMAIL

# ------------------------------------
# The following variables should not be changed except for advanced use cases
ifeq ($(OS),Windows_NT)
    root ?= $(CURDIR)/../..
else
    root ?= $(shell pwd)/../..
endif

# Camunda components will be installed into the following Kubernetes namespace
namespace ?= camunda
# Helm release name
release ?= camunda
# Helm chart coordinates for Camunda
chart ?= camunda/camunda-platform

# This file will be generated by make targets
chartValues ?= "$(root)/benchmark/camunda-values.yaml"

pathToCamundaProcessBpmnFile ?= "$(root)/bpmn/BenchmarkProcess.bpmn"

.PHONY: all
all: camunda await-zeebe set-benchmark-process create-deploy-model rebalance-leaders benchmark

# 0 kube from aks.mk: Create Kubernetes cluster. (No aplication gateway required)
.PHONY: kube
kube: kube-aks metrics url-grafana

# 1 cert-manager from cert-manager.mk: create certificate manager for tls

# 2 letsencrypt-staging/-prod from cert-manager.mk: create letsencrypt cert issuer

# 3 azure-ingress-nginx create nginx ingress controller with dns and tls

# 4 create camunda-values-nginx-all.yaml

# 5 helm install camunda from camunda.mk with own tls config, combined ingress

# 6 annotate-ingress-tls from cert-manager.mk

# 7 Show external URLs
.PHONY: external-urls
external-urls: external-urls-all

# Optional: public-zeebe-ingress : add an ingress for GRPC communication to zeebe-gateway
.PHONY: public-zeebe-ingress
public-zeebe-ingress: fqdn
	cat $(root)/azure/include/public-zeebe-ingress.yaml | sed -E "s/MY_HOSTNAME/$(fqdn)/g;" | kubectl create -n $(namespace) -f -

# Optional: Run 'make config-keycloak' from camunda.mk to allow non-ssl connections to Keycloak

### <--- End of setup --->

# Getting url for grafana is vendor specific
.PHONY: url-grafana
url-grafana:
	@echo "http://`kubectl get svc metrics-grafana-loadbalancer -n default -o 'custom-columns=ip:status.loadBalancer.ingress[0].ip' | tail -n 1`/d/zeebe-dashboard/zeebe?var-namespace=$(namespace)"


# Remove nginx ingress and Camunda from cluster
.PHONY: clean
clean: clean-camunda clean-ingress clean-cert-manager
	rm -f $(chartValues)

.PHONY: clean-kube
clean-kube: clean-metrics clean-kube-aks

include $(root)/azure/include/aks.mk
include $(root)/include/camunda.mk
include $(root)/bpmn/deploy-models.mk
include $(root)/include/ingress-nginx.mk
include $(root)/include/cert-manager.mk
include $(root)/metrics/metrics.mk
include $(root)/azure/include/fileshare.mk
include $(root)/echo-server/echo.mk
include $(root)/oauth2-proxy/oauth2.mk
include $(root)/benchmark/benchmark.mk
include $(root)/bpmn/deploy-models.mk
